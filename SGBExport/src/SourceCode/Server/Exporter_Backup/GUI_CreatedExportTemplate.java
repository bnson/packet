/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SourceCode.Server.Exporter;

import SourceCode.Server.utils.fileUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.wiztools.xsdgen.XsdGen;
import org.xml.sax.SAXException;

/**
 *
 * @author bnson
 */
public class GUI_CreatedExportTemplate extends javax.swing.JFrame {

    /**
     * Creates new form GUI_CreatedExportTemplate
     * @param guiANP
     * @param projectName
     * @param pathFileFieldsExport
     * @param listTable
     */    
    public GUI_CreatedExportTemplate(GUI_AddNewProject guiANP, String projectName, String pathFileFieldsExport, List<OBJ_Table> listTable) {
        this.pathFileFieldsExport = pathFileFieldsExport;
        this.guiANP = guiANP;
        this.projectName = projectName;
        this.pathProject = "Projects" + File.separator + this.projectName;
        this.listTable = listTable;
        initComponents();
        loadFieldsExport();
        loadExportTemplate();
    }

    private void loadExportTemplate() {
        this.modelExportTemplate = (DefaultTreeModel)treeExportTemplate.getModel();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("table");
        DefaultMutableTreeNode nodeRow = new DefaultMutableTreeNode("row");
        modelExportTemplate.setRoot(root);
        modelExportTemplate.insertNodeInto(nodeRow, root, 0);
        
        
    }
    private void loadFieldsExport() {
        try { 
            this.modelFieldsExport = (DefaultTreeModel)treeFieldsExport.getModel();
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("table");
            modelFieldsExport.setRoot(root);

            // parse the document
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse (new File(pathFileFieldsExport)); 
            NodeList list = doc.getElementsByTagName("xs:element"); 
            //loop to print data
            DefaultMutableTreeNode nodeRow = new DefaultMutableTreeNode("row");
            for(int i = 0 ; i < list.getLength(); i++)
            {
                Element first = (Element)list.item(i);
                if(first.hasAttributes())
                {
                    if (i == 1) {
                        modelFieldsExport.insertNodeInto(nodeRow, root, i-1);
                    } else if (i > 1) {
                        DefaultMutableTreeNode nodeTmp = new DefaultMutableTreeNode(first.getAttribute("name"));
                        modelFieldsExport.insertNodeInto(nodeTmp, nodeRow, i-2);
                    }
                }
            }              
            
        } catch (ParserConfigurationException | SAXException | IOException ex) {
            System.out.println("Error: " + ex.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        treeFieldsExport = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        treeExportTemplate = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btAdd = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btControlCreated = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeFieldsExport.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(treeFieldsExport);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeExportTemplate.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeExportTemplate.setEditable(true);
        jScrollPane2.setViewportView(treeExportTemplate);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton3.setText("Refresh");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btAdd.setText("Add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btRemove.setText("Remove");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRemove)
                .addContainerGap(158, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAdd)
                    .addComponent(btRemove))
                .addContainerGap())
        );

        btControlCreated.setText("Created");
        btControlCreated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btControlCreatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btControlCreated)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btControlCreated)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        this.guiANP.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        // TODO add your handling code here:
        TreePath currentSelection = treeExportTemplate.getSelectionPath();
        if (currentSelection != null) {
            DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode) (currentSelection
                    .getLastPathComponent());
            MutableTreeNode parent = (MutableTreeNode)(currentNode.getParent());
            if (parent != null) {
                this.modelExportTemplate.removeNodeFromParent(currentNode);
            }
        }       
    }//GEN-LAST:event_btRemoveActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode selNode = (DefaultMutableTreeNode)treeExportTemplate.getLastSelectedPathComponent();
        if (selNode != null) {
          DefaultMutableTreeNode newNode = new DefaultMutableTreeNode("New Node");
          this.modelExportTemplate.insertNodeInto(newNode, selNode, selNode.getChildCount());
          TreeNode[] nodes = this.modelExportTemplate.getPathToRoot(newNode);
          TreePath path = new TreePath(nodes);
          treeExportTemplate.scrollPathToVisible(path);
          treeExportTemplate.setSelectionPath(path);
          treeExportTemplate.startEditingAtPath(path);
        }        
    }//GEN-LAST:event_btAddActionPerformed

    private void btControlCreatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btControlCreatedActionPerformed
        try {
            //System.out.println(getTreeText(this.modelExportTemplate, this.modelExportTemplate.getRoot(), ""));
            //System.out.println(toXml(this.modelExportTemplate));
            String pathTmpXML = "Projects" + File.separator + "tmp.xml";
            if (fileUtils.wirteFile(pathTmpXML, toXml(this.modelExportTemplate))) {

                XsdGen gen = new XsdGen();
                gen.parse(new File(pathTmpXML));
                File out = new File(pathProject + File.separator + "Template_001.xsd");
                gen.write(new FileOutputStream(out));
                fileUtils.delete(pathTmpXML);
            }
        } catch (IOException | org.wiztools.xsdgen.ParseException ex) {
            Logger.getLogger(GUI_CreatedExportTemplate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btControlCreatedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_CreatedExportTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI_CreatedExportTemplate(null, null, null, null).setVisible(true);
        });
        
    }

    public static String toXml(TreeModel model){
        String rs = "";
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation impl = builder.getDOMImplementation();
            
            // Build an XML document from the tree model
            Document doc = impl.createDocument(null, null, null);
            Element root = createTree(doc, model, model.getRoot());
            doc.appendChild(root);
            
            // Transform the document into a string
            DOMSource domSource = new DOMSource(doc);
            TransformerFactory tf = TransformerFactory.newInstance();
            Transformer transformer = tf.newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            StringWriter sw = new StringWriter();
            StreamResult sr = new StreamResult(sw);
            transformer.transform(domSource, sr);
            rs = sw.toString();
        } catch (ParserConfigurationException | TransformerException ex) {
            Logger.getLogger(GUI_CreatedExportTemplate.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return rs;
    }
    
    private static Element createTree(Document doc, TreeModel model, Object node) {
        Element el = doc.createElement(node.toString());
        for (int i = 0; i < model.getChildCount(node); i++) {
            Object child = model.getChild(node, i);
            el.appendChild(createTree(doc, model, child));
        }
        return el;
    }  

    private String getTreeText(TreeModel model, Object object, String indent) {
        String myRow = indent + object + "\n";
        for (int i = 0; i < model.getChildCount(object); i++) {
            myRow += getTreeText(model, model.getChild(object, i), indent + "  ");
        }
        return myRow;
    }

    private List<OBJ_Table> listTable = null;        
    private DefaultTreeModel modelFieldsExport;
    private DefaultTreeModel modelExportTemplate;    
    private DefaultMutableTreeNode selectNode = null;    
    
    private final GUI_AddNewProject guiANP;
    private final String projectName;
    private final String pathProject;
    private final String pathFileFieldsExport;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btControlCreated;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTree treeExportTemplate;
    private javax.swing.JTree treeFieldsExport;
    // End of variables declaration//GEN-END:variables
}
