/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myCode;

/**
 *
 * @author bnson
 */
public class WindowsExplorerStringComparator implements java.util.Comparator<String> {

    private String str1, str2;
    private int pos1, pos2, len1, len2;

    @Override
    public int compare(String s1, String s2) {
        str1 = s1;
        str2 = s2;
        len1 = str1.length();
        len2 = str2.length();
        pos1 = pos2 = 0;

        int result = 0;
        while (result == 0 && pos1 < len1 && pos2 < len2) {
            char ch1 = str1.charAt(pos1);
            char ch2 = str2.charAt(pos2);

            if (Character.isDigit(ch1)) {
                result = Character.isDigit(ch2) ? compareNumbers() : -1;
            } else if (Character.isLetter(ch1)) {
                result = Character.isLetter(ch2) ? compareOther(true) : 1;
            } else {
                result = Character.isDigit(ch2) ? 1
                        : Character.isLetter(ch2) ? -1
                        : compareOther(false);
            }

            pos1++;
            pos2++;
        }

        return result == 0 ? len1 - len2 : result;
    }

    private int compareNumbers() {
        int end1 = pos1 + 1;
        while (end1 < len1 && Character.isDigit(str1.charAt(end1))) {
            end1++;
        }
        int fullLen1 = end1 - pos1;
        while (pos1 < end1 && str1.charAt(pos1) == '0') {
            pos1++;
        }

        int end2 = pos2 + 1;
        while (end2 < len2 && Character.isDigit(str2.charAt(end2))) {
            end2++;
        }
        int fullLen2 = end2 - pos2;
        while (pos2 < end2 && str2.charAt(pos2) == '0') {
            pos2++;
        }

        int delta = (end1 - pos1) - (end2 - pos2);
        if (delta != 0) {
            return delta;
        }

        while (pos1 < end1 && pos2 < end2) {
            delta = str1.charAt(pos1++) - str2.charAt(pos2++);
            if (delta != 0) {
                return delta;
            }
        }

        pos1--;
        pos2--;

        return fullLen2 - fullLen1;
    }

    private int compareOther(boolean isLetters) {
        char ch1 = str1.charAt(pos1);
        char ch2 = str2.charAt(pos2);

        if (ch1 == ch2) {
            return 0;
        }

        if (isLetters) {
            ch1 = Character.toUpperCase(ch1);
            ch2 = Character.toUpperCase(ch2);
            if (ch1 != ch2) {
                ch1 = Character.toLowerCase(ch1);
                ch2 = Character.toLowerCase(ch2);
            }
        }

        return ch1 - ch2;
    }
    
}


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myCode;

import com.ibm.icu.text.CharsetDetector;
import com.ibm.icu.text.CharsetMatch;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author bnson
 */
public class utilityFileFolder {

    public static void removeEmptyLineInTextFile() {
        
    }
    
    public static void writeTextFile(String pathFile, String encoding, String content, Boolean append) {
        BufferedWriter bw = null;
        
        try {
            if (pathFile.toLowerCase().endsWith(".txt")) {
                File f = new File(pathFile);
                Boolean fileExists = checkFileExists(pathFile);
                
                if (fileExists) {    
                    encoding = detectEncoding(pathFile);
                } else {
                    f.createNewFile();
                    System.out.println("MESSAGE[!] File is created.");                    
                }
                
                bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f, append), encoding));
                
                bw.write(content);
                bw.newLine();
                //out.append(content);
                
            }

        } catch (UnsupportedEncodingException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (bw != null) {
                    bw.flush();
                    bw.close();        
                }
            } catch (IOException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }


    }
    
    public static String detectEncoding(String pathFile) {
        String encoding = "";
        
        if (checkFileExists(pathFile)) {

            InputStream in = null;

            try {
                in = new BufferedInputStream(new FileInputStream(pathFile));
                CharsetDetector detector = new CharsetDetector();
                detector.setText(in);

                CharsetMatch charsetMatch = detector.detect();

                if (charsetMatch != null) {
                    encoding = charsetMatch.getName();
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (in != null) {
                        in.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
        
        return encoding;
        
    }

    public static String readTextFileToString_ReadAllBytes(String path) {
        String content = "";

        if (checkFileExists(path)) {
            String encoding = detectEncoding(path);
            byte[] contentByte;

            try {
                contentByte = Files.readAllBytes(Paths.get(path));

                if (!encoding.isEmpty()) {
                    content = new String(contentByte, encoding);
                } else {
                    content = new String(contentByte);
                }

            } catch (IOException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        return content;
        
    }

    public static String readTextFileToString_BufferedReader(String path) {

        StringBuilder content = new StringBuilder();
        content.append("");

        if (checkFileExists(path)) {
            
            BufferedReader reader = null;
            String encoding = detectEncoding(path);
            
            //String line_separator = "\n\r";
            String line_separator = System.getProperty("line.separator");

            try {

                if (!encoding.isEmpty()) {
                    reader = new BufferedReader(new InputStreamReader(new FileInputStream(path), encoding));
                } else {
                    //reader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));
                    reader = new BufferedReader(new FileReader(path));
                }

                for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                    //content.append(new String(line.getBytes(), encoding));
                    content.append(line);
                    content.append(line_separator);
                }
                content.deleteCharAt(content.length() - 1);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (reader != null) {
                        reader.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(utilityFileFolder.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

        return content.toString();

    }
    
    public static List<String> getListNameOfFiles(String pathDirectoryName, Boolean subDirectory) {
        List<String> rs = null;

        if (checkFileExists(pathDirectoryName)) {
            rs = new ArrayList<>();
            
            File directory = new File(pathDirectoryName);
            File[] fList = directory.listFiles();
            
            for (File file : fList) {
                if (file.isFile()) {
                    rs.add(file.getName());
                } else if (file.isDirectory() && subDirectory) {
                    rs.addAll(getListNameOfFiles(file.getAbsolutePath(), subDirectory));
                }
            }

        }

        return rs;
    }
    
    public static ArrayList<String> getArrayListNameOfFiles(String pathDirectoryName, Boolean subDirectory) {
        ArrayList<String> rs = null;

        if (checkFileExists(pathDirectoryName)) {
            rs = new ArrayList<>();
            
            File directory = new File(pathDirectoryName);
            File[] fList = directory.listFiles();
            
            for (File file : fList) {
                if (file.isFile()) {
                    rs.add(file.getName());
                } else if (file.isDirectory() && subDirectory) {
                    rs.addAll(getListNameOfFiles(file.getAbsolutePath(), subDirectory));
                }
            }

        }

        return rs;
        
    }
    
    public static Boolean checkFileExists(String pathFile) {
        File f = new File(pathFile);
        if (!f.exists() && f.isDirectory()) {
            System.out.println("ERROR[x] File is not exists.");
        }
        return (f.exists() && f.isFile());
    }
    

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myCode;

/**
 *
 * @author bnson
 */
public class utilityList {
    
    public static void printListString(java.util.List<String> list) {
        list.forEach((_item) -> {
            System.out.println("list: " + _item);
        });        
    }      

    public static java.util.Comparator<java.io.File> COMPARATOR_NATURAL_SORT_FILE = new java.util.Comparator<java.io.File>() {
        @Override
        @SuppressWarnings("empty-statement")
        public int compare(java.io.File o1, java.io.File o2) {;
            return COMPARATOR_NATURAL_SORT_STRING.compare(o1.getName(), o2.getName());
        }
        
        private final java.util.Comparator<String> COMPARATOR_NATURAL_SORT_STRING = new WindowsExplorerStringComparator();
    };
    
    public static java.util.Comparator<String> COMPARATOR_NATURAL_SORT_STRING = new WindowsExplorerStringComparator();
    
    
            


    
}


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myCode;

/**
 *
 * @author bnson
 */
public class utilityString {
    
    public static String replaceLineSeparatorToSpace(String str) {
        String line_separator = "[\\n|\\r]";
        return str.trim().replaceAll("\\s+", " ").replaceAll(System.getProperty("line.separator"), " ").replaceAll(line_separator, " ");
    }
    
    public static String trimSpace(String str) {
        return str.trim().replaceAll("[ ]+", " ");
    }
    
    public static String removeSpace(String str) {
        return str.replaceAll("[ ]+", "");
    }
    
    
}








